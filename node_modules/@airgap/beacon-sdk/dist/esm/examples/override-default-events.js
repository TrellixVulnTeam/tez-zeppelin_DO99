var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { BeaconEvent, DAppClient, PermissionScope, defaultEventCallbacks } from '..'; // Replace '..' with '@airgap/beacon-sdk'
const client = new DAppClient({
    name: 'My Sample DApp',
    eventHandlers: {
        [BeaconEvent.PAIR_INIT]: {
            // Every BeaconEvent can be overriden by passing a handler here.
            // The default will not be executed anymore. To keep the default,
            // you will have to call it again.
            handler: (data, eventCallback) => __awaiter(void 0, void 0, void 0, function* () {
                yield defaultEventCallbacks.PAIR_INIT(data); // Add this if you want to keep the default behaviour.
                console.log('syncInfo', data, eventCallback);
            })
        }
    }
});
const scopes = [
    PermissionScope.OPERATION_REQUEST,
    PermissionScope.SIGN,
    PermissionScope.THRESHOLD
];
client
    .requestPermissions({
    scopes
})
    .then((permissionResponse) => {
    console.log('permissions', permissionResponse);
})
    .catch((permissionError) => console.error(permissionError));
//# sourceMappingURL=override-default-events.js.map