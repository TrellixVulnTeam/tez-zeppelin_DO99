var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { BlockExplorer, DAppClient, NetworkType } from '..'; // Replace '..' with '@airgap/beacon-sdk'
class TzStatsBlockExplorer extends BlockExplorer {
    constructor(rpcUrls = {
        [NetworkType.MAINNET]: 'https://tzstats.com/',
        [NetworkType.DELPHINET]: 'https://delphi.tzstats.com/',
        [NetworkType.EDONET]: 'https://edo.tzstats.com/',
        [NetworkType.CUSTOM]: 'https://edo.tzstats.com/'
    }) {
        super(rpcUrls);
        this.rpcUrls = rpcUrls;
    }
    getAddressLink(address, network) {
        return __awaiter(this, void 0, void 0, function* () {
            const blockExplorer = yield this.getLinkForNetwork(network);
            return `${blockExplorer}/${address}`;
        });
    }
    getTransactionLink(transactionId, network) {
        return __awaiter(this, void 0, void 0, function* () {
            const blockExplorer = yield this.getLinkForNetwork(network);
            return `${blockExplorer}/${transactionId}`;
        });
    }
}
const client = new DAppClient({ name: 'My Sample DApp', blockExplorer: new TzStatsBlockExplorer() });
client
    .requestPermissions()
    .then((response) => {
    console.log('permissions', response);
})
    .catch((permissionError) => console.error(permissionError));
//# sourceMappingURL=custom-block-explorer.js.map